{
  /*
   *tsconfig.json 是ts编译器的配置文件，ts编译器可以根据它的信息来对代码进行编译
   */

  /*
      "include"用来指定哪些文件需要被编译
      路径：**表示任意目录
          *表示任意文件
  
      "exclude"表示不需要被编译的文件目录
      默认值：["node_modules","bower_components","jspm_packages"]
      
      "extends" 定义被继承的配置文件
      注意：路径下有多个配置文件的时候才起效果，可在本配置文件中继承目标配置文件的内容
      
      "files" 指定被编译文件的列表（对少量文件适用）
  
      "compilerOptions 编译器的选项"
      */
  //记得用双引号
  "include": ["./src/*"],
  // "exclude":[
  //     "./hello/*"
  // ],
  "compilerOptions": {
    //target 用来指定ts被编译为的ES版本
    //ES3...5 ts文件中的let变成了var
    //ES6 ts文件中的let保持不变
    //ESNext 表示最新版本的ES
    /* Argument for '--target' option must be: 
      'es3', 'es5', 'es6', 'es2015', 'es2016', 'es2017', 
      'es2018', 'es2019', 'es2020', 'es2021', 'es2022', 
      'esnext'.*/
    "target": "ESNext",

    //module 指定要使用的模块化的规范
    /*Argument for '--module' option must be: 'none',
       'commonjs', 'amd', 'system', 'umd', 'es6', 'es2015', 
       'es2020', 'es2022', 'esnext', 'node16', 'nodenext'*/
    "module": "ES2015",
    //"module": "AMD",

    //lib用来指定项目中要使用的库
    //DOM API就是一个库
    //一般情况下不需要改，如果是在浏览器中运行，lib不需要再设置
    //（默认是浏览器的运行环境）
    //如果发现报错 “找不到全局类型array” 是因为lib里的引用库存在依赖关系
    "lib": ["DOM", "ES2015"],

    //outDir 用来指定编译后文件所在的目录
    "outDir": "./dist",

    //outFile 可以将代码合并为一个文件
    //Only 'amd' and 'system' modules are supported alongside --outFile.
    //所有的全局作用域中的代码会合并到一个文件中
    //"outFile": "./dist/app.js",//（了解一下）

    //是否对JS文件进行编译，默认是false
    "allowJs": true,
    //是否检查JS代码是否符合语法规范(ts的规范)，默认false
    "checkJs": true,
    //是否移除注释，默认false
    "removeComments": true,
    //不生成编译后的文件，默认false
    "noEmit": false,
    //当有错误时不生成编译的文件，默认false
    "noEmitOnError": true,

    //所有严格检查的总开关，默认false，为true下面的开关全部都打开
    "strict": true,
    //是否总是严格模式，默认是false，true时js文件自动加上"use strict"
    //如果有引入、导出的代码，会自动进入严格模式
    "alwaysStrict": true,

    //不允许隐式的any类型，默认是false
    "noImplicitAny": false,

    //不允许隐式（不明确类型）的this，默认是false
    "noImplicitThis": true,

    //严格检查空值，默认值false
    "strictNullChecks": false
  }
}
